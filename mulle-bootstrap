#! /bin/sh
#
#   Copyright (c) 2015 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.

MULLE_BOOTSTRAP_VERSION=2.0
export MULLE_BOOTSTRAP_VERSION

#
# This is the main user interface to mulle-bootstrap
# sorta like git
#
BOOTSTRAP_SUBDIR=.bootstrap

PATH="/usr/local/libexec/mulle-bootstrap:`pwd -P`/dependencies/bin:`pwd -P`/addictions/bin:$PATH"
export PATH

MULLE_BOOTSTRAP_PID="$$"
export MULLE_BOOTSTRAP_PID


trap_fail()
{
   exit 1
}

trap trap_fail INT


usage()
{
   cat <<EOF
usage: mulle-bootstrap [-a|-y][-n][-v|-s|-t] [command] [--help]
 Flags
   -a -y     : default answer to questions (scripts wont be checked)
               -a (clone preferred) -y (symlink preferred)
   -n        : do nothing creative or destructive
   -v -s -t  : -v to be more verbose (-vv or -vvv for more verbosity)
               -s to be more terse
               -t turns on shell tracing for development
   -V        : show build commands

 Common user commands:
   clone     : git clone a remote repository and try to bootstrap and build it
   bootstrap : does fetch and build recursively [default]
   nomagic   : does fetch and build, but not recursively
   clean     : cleans mulle-bootstrap produced files.

 Common maintainer commands:
   init      : initializes a bootstrap project
EOF

   if [ "`uname`" = 'Darwin' ]
   then
      cat <<EOF
   xcode     : sets up the xcodeproj settings
EOF
   fi

cat <<EOF
   tag       : tag this project and fetched repositories

 Specialized commands:
   build     : builds fetched repositories
   fetch     : fetches required repositories recursively. Use it after updating
               the repositories and embedded_repositories files.
   update    : updates repositories (pull).
   install   : install dependencies as system headers

 Specify the -h or --help option after each command to get more help.
EOF
   exit 1
}

#
# simple option handling
#
while :
do
   if [ $# -eq 0 ]
   then
      break
   fi

   case "$1" in
      -a)
         MULLE_BOOTSTRAP_ANSWER="NO"
         export MULLE_BOOTSTRAP_ANSWER  # override settings with environment
       ;;

      -y)
         MULLE_BOOTSTRAP_ANSWER="YES"
         export MULLE_BOOTSTRAP_ANSWER  # override settings with environment
      ;;

      -f) 
         MULLE_BOOTSTRAP_DIRTY_HARRY="NO"
      ;;

      -n)
         MULLE_BOOTSTRAP_DRY_RUN="YES"
      ;;

      -tm)
         MULLE_BOOTSTRAP_TRACE_MERGE="YES"
      ;;

      -ts)
         MULLE_BOOTSTRAP_TRACE_SCRIPT_CALLS="YES"
      ;;

      -t)
         MULLE_BOOTSTRAP_TRACE="1848"
         export MULLE_BOOTSTRAP_TRACE  # override settings with environment
         COPYMOVEFLAGS="-v"
         GITFLAGS="-v"
      ;;

      -V)
         MULLE_BOOTSTRAP_VERBOSE_BUILD="YES"
         export MULLE_BOOTSTRAP_VERBOSE_BUILD
      ;;


      -v)
         if [ -z "${MULLE_BOOTSTRAP_TRACE}" ]
         then
            MULLE_BOOTSTRAP_TRACE="VERBOSE"
            export MULLE_BOOTSTRAP_TRACE  # override settings with environment
         fi

         COPYMOVEFLAGS="-v"
         GITFLAGS="-v"
      ;;

      -vv)
         if [ -z "${MULLE_BOOTSTRAP_TRACE}" ]
         then
            MULLE_BOOTSTRAP_TRACE="FLUFF"
            export MULLE_BOOTSTRAP_TRACE  # override settings with environment
         fi

         COPYMOVEFLAGS="-v"
         GITFLAGS="-v"
      ;;

      -vvv)
         if [ -z "${MULLE_BOOTSTRAP_TRACE}" ]
         then
            MULLE_BOOTSTRAP_TRACE="TRACE"
            export MULLE_BOOTSTRAP_TRACE  # override settings with environment
         fi

         COPYMOVEFLAGS="-v"
         GITFLAGS="-v"
      ;;

      -s)
         MULLE_BOOTSTRAP_TRACE=
         export MULLE_BOOTSTRAP_TRACE  # override settings with environment
         MULLE_BOOTSTRAP_TERSE="YES"
         export MULLE_BOOTSTRAP_TERSE  # override settings with environment
         GITFLAGS="-q"
      ;;

      -*)
         log_error "unknown option \"$1\""
         usage
      ;;

      *)
         break
      ;;
   esac

   shift
   continue
done



bootstrap()
{
   if [ "$1" = "-h" -o "$1" = "--help" ]
   then
      cat <<EOF >&2
usage: bootstrap
   There is nothing more to it.
EOF
      exit 1
   fi

   #
   # this is run when checking mulle-project itself out
   #
   if [ -f "src/mulle-bootstrap-local-environment.sh" -a -x install.sh ]
   then
      . install.sh "$@"
      exit 0
   else
      . mulle-bootstrap-warn-scripts.sh 

      warn_scripts_main "${BOOTSTRAP_SUBDIR}" || exit 1
   fi

   . mulle-bootstrap-refresh.sh 
   . mulle-bootstrap-fetch.sh  
   . mulle-bootstrap-build.sh 

   if [ "${DONT_RECURSE}" = "" ]
   then
      refresh_main                 || exit 1
      fetch_main install "$@"      || exit 1
   else
      refresh_main nonrecursive    || exit 1
      fetch_main nonrecursive "$@" || exit 1
      refresh_main nonrecursive    || exit 1
   fi

   # do it again now!
   build_main "$@" || exit 1
}


main()
{
   local command

   command=${1:-"bootstrap"}
   [ $# -eq 0 ] || shift

   #
   # some commands only run when we have a .bootstrap folder
   #
   if [ ! -d "${BOOTSTRAP_SUBDIR}" ]
   then
      case "${command}" in
         bootstrap|nomagic|build|ibuild|refresh)
            echo "There is no ${BOOTSTRAP_SUBDIR} folder here, can't continue" >&2
            exit 1
         ;;
         dist-clean|fetch|update|setup-xcode|xcode|tag)
            echo "There is no ${BOOTSTRAP_SUBDIR} folder here, can't continue" >&2
            exit 1
         ;;
      esac
   fi

   case "${command}" in
      bootstrap)
         bootstrap "$@" || exit 1
      ;;

      nomagic)
         DONT_RECURSE=YES bootstrap "$@" || exit 1
      ;;

      # experimental stuff
      project)
         . mulle-bootstrap-project.sh 

         project_main "$@" || exit 1
      ;;

      install)
         . mulle-bootstrap-install.sh 

         install_main "$@" || exit 1
      ;;

      build)
         . mulle-bootstrap-refresh.sh 
         . mulle-bootstrap-build.sh 

         refresh_main || exit 1
         build_main "$@" || exit 1
      ;;

      refresh)
         . mulle-bootstrap-refresh.sh 

         refresh_main "$@" || exit 1
      ;;

      clean)
         . mulle-bootstrap-refresh.sh 
         . mulle-bootstrap-clean.sh 

         refresh_main || exit 1
         clean_main "$@" || exit 1
      ;;

      dist-clean)
         . mulle-bootstrap-refresh.sh 
         . mulle-bootstrap-clean.sh 

         refresh_main || exit 1
         clean_main "dist" || exit 1
      ;;

      fetch)
         . mulle-bootstrap-refresh.sh 
         . mulle-bootstrap-fetch.sh 

         refresh_main || exit 1
         DONT_ASK_AFTER_WARNING=YES fetch_main "install" "$@" || exit 1
      ;;

      update)
         . mulle-bootstrap-fetch.sh 

         fetch_main "${command}" "$@" || exit 1
      ;;

      init)
         . mulle-bootstrap-init.sh

        init_main "$@" || exit 1
      ;;

      setup-xcode|xcode)
         . mulle-bootstrap-refresh.sh 
         . mulle-bootstrap-xcode.sh 

         refresh_main || exit 1
         xcode_main "$@" || exit 1
      ;;

      tag)
         . mulle-bootstrap-refresh.sh 
         . mulle-bootstrap-tag.sh 

         refresh_main || exit 1
         tag_main "$@" || exit 1
      ;;

      version)
         echo "${MULLE_BOOTSTRAP_VERSION}" || exit 1
      ;;

      *)
         log_error "Unknown command \"${command}\""
         usage
      ;;
      esac
}

main "$@"
